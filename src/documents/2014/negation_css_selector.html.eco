---
title: "CSS-селектор :not. Полезные примеры"
excerpt: "CSS3 селектор :not (negation). Примеры использования"
description: "CSS3 селектор :not (negation). Примеры использования"
created_at: 2014-01-19
kind: article
publish: true
disqusid: negation-css-selector
tags: [css]
starred: true
styles: ['/css/caniuse.css']
scripts: ['/vendor/caniuse.js']
og_image: '/i/og/og-paulradzkov-2014-negation_css_selector.png'
---


<p>В спецификации и блогах про селектор <code class="hljs-pseudo">:not</code> обычно приводят какие-то искусственные примеры, которые хоть и объясняют синтаксис и принцип действия, но не несут никакой идеи о том, как получить пользу от нового селектора.</p>

<!-- cut -->

<p>Например:</p>

<pre><code class="language-css">p:not(.classy) { color: red; }
</code></pre>

<p>Ну окей, думаю я, в моей практике не встречались такие ситуации. Обходились мы ведь как-то раньше без <code class="hljs-pseudo">:not</code>. Приходилось немного переписать структуру селекторов или обнулить пару значений.</p>

<h2>Пример 1. Элемент без класса</h2>

<p>Селектор  <code class="hljs-pseudo">:not</code> может быть крайне полезен, когда нам нужно застилить контент сгенерированный пользователем (нет возможности расставить в нем классы), или когда у нас контента очень много и расставлять в нем классы слишком трудоёмко.</p>

<p>Например, мы хотим на сайте сделать красивые буллиты для ненумерованных списков <code class="css"><span class="hljs-tag">ul li</span></code>. Мы пишем код:</p>

<pre><code class="language-css">ul li { /* наши красивые стили */ }
</code></pre>

<p>В результате, наши красивые буллиты появляются не только в контенте, но и, например, в навигации, где тоже используются <code class="css"><span class="hljs-tag">ul li</span></code>.</p>

<p>Мы ограничиваем область действия селектора:</p>

<pre><code class="language-css">.content ul li { /* красота */ }
</code></pre>

<p>Навигацию мы спасли, но ненужные буллиты всё еще вылазят на слайдерах, списках новостей и других конструкциях внутри <code class="hljs-class">.content</code>, где тоже используются <code class="css"><span class="hljs-tag">ul li</span></code>.</p>

<p>Далее у нас варианты:</p>

<p>1) обнулить мешающие стили в слайдерах и других местах. Но это противоречит «<abbr title="Don't Repeat Yourself">DRY</abbr>» и является одним из <a href="http://csswizardry.com/2012/11/code-smells-in-css/" target="_blank">признаков «вонючего» кода</a>. К тому же не решает проблему раз и навсегда: добавите, например, аккордеон и списки в нем снова придется обнулять.</p>

<p>2) пойти от обратного и ставить класс всем спискам, которые нужно стилизовать:</p>

<pre><code class="language-css">.textlist li { /* красота */ }
</code></pre>

<p>Это добавляет лишней работы по расстановке классов в контенте. Иногда имеет смысл, но лишнюю работу никто не любит.</p>

<p>3) стилизовать только те <code class="css"><span class="hljs-tag">ul li</span></code>, у которых нет никаких классов вообще:</p>

<pre><code class="language-css">ul:not([class]) li { /* красота */ }
</code></pre>

<p>Победа! Нам не нужно делать дополнительную работу по расстановке классов в контенте. А на слайдерах, аккордеонах и прочих конструкциях, которые не должны выглядеть как списки, но используют их в своей разметке, в 99% случаев уже будут свои классы, и наши стили их не затронут.</p>

<p>Этот прием — «выбирать только элементы без класса» — очень полезен для оформления пользовательского контента и его можно применять не только к спискам, но и для других случаев.</p>

<h2>Пример 2. Изменение внешнего вида всех элементов, кроме наведенного</h2>

<figure>
  <a href="http://cssdeck.com/labs/dlg62kjv" target="_blank"><img src="<%= @document.url %>sample2.gif" width="600" height="150" alt="Изменение внешнего вида всех элементов, кроме наведенного"/></a>
  <figcaption>
    <p style="text-align: center;"><a href="http://cssdeck.com/labs/dlg62kjv" class="link-to-demo" target="_blank">Пример</a></p>
  </figcaption>
</figure>

<p>Такой эффект можно реализовать без <code class="hljs-pseudo">:not</code> путем перезаписи значений. И это будет работать в бо́льшем количестве браузеров.</p>

<pre><code class="language-css">/* с перезаписью свойств */
ul:hover li {
  opacity:0.5;
}
ul:hover li:hover {
  opacity:1;
}
</code></pre>

<p>Но если придется обнулять слишком много свойств, то есть смысл использовать <code class="hljs-pseudo">:not</code>.</p>

<pre><code class="language-css">/* используя :not() */
ul:hover li:not(:hover) {
  opacity:0.5;
}
</code></pre>

<h2>Пример 3. Меню с разделителями между элементами</h2>
<figure>
    <a href="http://cssdeck.com/labs/dlg62kjv" target="_blank"><img src="<%= @document.url %>sample3.png" width="600" height="200" alt="Меню с разделителями между элементами"/></a>
  <figcaption>
    <p style="text-align: center;"><a href="http://cssdeck.com/labs/dlg62kjv" class="link-to-demo" target="_blank">Пример</a></p>
  </figcaption>
</figure>

<p>Как и в предыдущем примере, желаемого можно добиться несколькими способами.</p>

<p>Через перезапись свойств. Но тут два правила вместо одного, что не есть «<abbr title="Don't Repeat Yourself">DRY</abbr>».</p>

<pre><code class="language-css">.menu-item:after {
  content: ' | ';
}
.menu-item:last-child:after {
  content: none;
}
</code></pre>

<p>Через <code class="hljs-pseudo">:nth-last-child()</code>. Одно правило, но тяжело читается.</p>

<pre><code class="language-css">.menu-item:nth-last-child(n+2):after {
  content: ' | ';
}
</code></pre>

<p>Через <code class="hljs-pseudo">:not()</code> — самая короткая и понятная запись.</p>

<pre><code class="language-css">.menu-item:not(:last-child):after {
  content: ' | ';
}
</code></pre>

<h2>Пример 4. Debug css</h2>

<p>Удобно для отладки и самоконтроля искать/подсвечивать картинки без alt, label без for и другие ошибки.</p>

<pre><code class="language-css">/* подсвечиваем теги без необходимых атрибутов */
img:not([alt]),
label:not([for]),
input[type=submit]:not([value]) {
  outline:2px solid red;
}

/* тревога, если первый child внутри списка не li и прочие похожие примеры */
ul > *:not(li),
ol > *:not(li),
dl > *:not(dt):not(dd) {
  outline:2px solid red;
}
</code></pre>

<h2>Пример 5. Поля форм</h2>

<p>Раньше текстовых полей форм было не много. Достаточно было написать:</p>

<pre><code class="language-css">select,
textarea,
[type="text"],
[type="password"] {
    /* стили для текстовых полей ввода */
}
</code></pre>

<p>С появлением новых типов полей в HTML5 этот список увеличился:</p>

<pre><code class="language-css">select,
textarea,
[type="text"],
[type="password"],
[type="color"],
[type="date"],
[type="datetime"],
[type="datetime-local"],
[type="email"],
[type="number"],
[type="search"],
[type="tel"],
[type="time"],
[type="url"],
[type="month"],
[type="week"] {
  /* стили для текстовых полей ввода */
}
</code></pre>

<p>Вместо перечисления 14 типов инпутов можно исключить 8 из них:</p>

<pre><code class="language-css">select,
textarea,
[type]:not([type="checkbox"]):not([type="radio"]):not([type="button"]):not([type="submit"]):not([type="reset"]):not([type="range"]):not([type="file"]):not([type="image"]) {
  /* стили для текстовых полей ввода */
}
</code></pre>

<p>Ладно, этот пример не очень красив, и я рекомендую всё же первый вариант с перечислением, он работает с IE8+, а второй вариант с IE9+.</p>

<h2>Поддержка</h2>

<p>Следует заметить, что согласно <a href="http://www.w3.org/TR/css3-selectors/#negation" target="_blank">спецификации</a> в скобках селектора <code class="hljs-pseudo">:not()</code> может стоять только <a href="http://www.w3.org/TR/css3-selectors/#simple-selectors-dfn" target="_blank">простой селектор</a> и в скобках нельзя использовать сам селектор <code class="hljs-pseudo">:not()</code>. Если нужно исключить несколько элементов, <code class="hljs-pseudo">:not()</code> можно повторить несолько раз, как в примере 5.</p>

<div class="caniuse" data-feature="css-sel3"><a href="http://caniuse.com/#search=%3Anot" target="_blank">Поддержка браузерами</a></div>

<p>Если очень нужны CSS3-селекторы в браузерах, которые их не поддерживают, можно использовать полифил <a href="http://selectivizr.com/" target="_blank">selectivizr</a>.</p>
